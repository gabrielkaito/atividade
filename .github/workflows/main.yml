name: Publica√ß√£o autom√°tica
on:  
  # nosso script ser√° executado sempre quando houver push e pull request nas branches destacadas abaixo
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
jobs:
  build:
    # sistema operacional da m√°quina que o Github ir√° disponibilizar para rodar o nosso script 
    runs-on: ubuntu-latest
    env:
      APP_PATH: /home/ubuntu/dev
      APP_SERVICE_NAME: app.service
      BACKUP_DIR: /home/ubuntu/backups
    # aqui √© iniciado o passo a passo para realizar o processo de publica√ß√£o
    steps:
      - uses: actions/checkout@v3

      - name: Cria um arquivo tempor√°rio para a chave privada e altera a permiss√£o do arquivo para que s√≥ o dono possa ler e escrever (necess√°rio para chaves)
        run: |
               echo "${{ secrets.KEY }}" > /tmp/private_key
               chmod 600 /tmp/private_key

      - name: Criando a pasta da aplica√ß√£o e acertando diret√≥rio... 
        # StrictHostKeyChecking: desativar prompt 'fingerprint'
        # UserKnownHostsFile: para n√£o salvar a chave
        run: |
               ssh -i /tmp/private_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@${{ secrets.HOST }} \
               sudo mkdir -p /home/ubuntu/dev

      - name: Ajustar permiss√µes no servidor de Produ√ß√£o
        run: |
          ssh -i /tmp/private_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@${{ secrets.HOST }} "sudo chown -R ubuntu:ubuntu /home/ubuntu/dev && sudo chmod -R 755 /home/ubuntu/dev"

      - name: Preparar diret√≥rios no servidor
        run: |
          ssh -i /tmp/private_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@${{ secrets.HOST }} \
          "sudo mkdir -p $APP_PATH $BACKUP_DIR && sudo chown -R ubuntu:ubuntu $APP_PATH $BACKUP_DIR && sudo chmod -R 755 $APP_PATH \
          
      - name: üîÅ Backup da aplica√ß√£o atual antes do deploy
        run: |
          ssh -i /tmp/private_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@${{ secrets.HOST }} "
            set -e
            # Pula backup se diret√≥rio estiver vazio
            if [ -d '$APP_PATH' ] && [ \"\$(ls -A '$APP_PATH' 2>/dev/null)\" ]; then
              TS=\$(date +%Y%m%d%H%M%S)
              FILE=\"$BACKUP_DIR/app-\$TS.tgz\"
              # Compacta conte√∫do atual
              tar -czf \"\$FILE\" -C \"$APP_PATH\" .
              # Guarda refer√™ncia do √∫ltimo backup
              echo \"\$FILE\" > \"$BACKUP_DIR/LAST_BACKUP\"
              # Mant√©m s√≥ os 5 mais recentes
              ls -1t \"$BACKUP_DIR\"/app-*.tgz 2>/dev/null | tail -n +6 | xargs -r rm -f
              echo \"Backup criado em: \$FILE\"
            else
              echo 'APP_PATH vazio - sem backup (primeiro deploy?)'
            fi
          "
                     
      - name: üì¶ Transferindo os arquivos da aplica√ß√£o
        run: |
               scp -i /tmp/private_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -r ${{ github.workspace }}/* ubuntu@${{ secrets.HOST }}:/home/ubuntu/dev


      - name: üîÑ Reiniciando o servi√ßo da aplica√ß√£o
        run: |
               ssh -i /tmp/private_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@${{ secrets.HOST }} \
               sudo systemctl restart app.service              

      - name: üßπ Limpa o arquivo de chave privada ap√≥s uso
        run: |
           rm /tmp/private_key

      - name: üì¢ Enviar mensagem para o Discord
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
          AUTHOR: ${{ github.actor }}
        run: |
          curl -H "Content-Type: application/json" \
                 -X POST \
                 -d "{\"content\": \"Deploy realizado com sucesso por **${AUTHOR}**!\"}" \
                 $DISCORD_WEBHOOK     
                 
      - name: ‚ö†Ô∏è Restaurar em caso de falha (rollback)
        if: ${{ failure() }}
        run: |
          echo "Falha detectada. Iniciando restaura√ß√£o do √∫ltimo backup..."
          ssh -i /tmp/private_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@${{ secrets.HOST }} "
            set -e
            if [ -f \"$BACKUP_DIR/LAST_BACKUP\" ]; then
              FILE=\$(cat \"$BACKUP_DIR/LAST_BACKUP\")
              if [ -f \"\$FILE\" ]; then
                echo \"Restaurando backup \$FILE para $APP_PATH...\"
                # Limpa conte√∫do atual e restaura
                rm -rf \"$APP_PATH\"/*
                tar -xzf \"\$FILE\" -C \"$APP_PATH\"
                # Garante permiss√µes p√≥s-restaura√ß√£o
                chown -R ubuntu:ubuntu \"$APP_PATH\"
                chmod -R 755 \"$APP_PATH\"
                # Reinicia servi√ßo
                sudo systemctl restart $APP_SERVICE_NAME
                sudo systemctl status $APP_SERVICE_NAME --no-pager -l || true
                echo \"Restaura√ß√£o conclu√≠da.\"
              else
                echo \"Arquivo de backup n√£o encontrado: \$FILE\"
              fi
            else
              echo 'Nenhum LAST_BACKUP encontrado. Nada a restaurar.'
            fi
          "
